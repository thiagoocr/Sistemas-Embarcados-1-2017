Data: 14/03/2017

Para todas as questões, compile-as com o gcc e execute-as via terminal.

1. Crie um "Olá mundo!" em C.

#include <stdio.h>
#include <stdlib.h>


int main(){

        printf("Olá mundo!\n");



        return 0;
}


2. Crie um código em C que pergunta ao usuário o seu nome, e imprime no terminal "Ola " e o nome do usuário. Por exemplo, considerando que o código criado recebeu o nome de 'ola_usuario_1':
	$ ./ola_usuario_1
	$ Digite o seu nome: Eu
	$ Ola Eu
	$

#include <stdio.h>
#include <stdlib.h>

int main(/*int argc, char **argv*/){
        char *nome;
        nome = (char*)(malloc(100*sizeof(char)));
        printf("Digite o seu nome: ");
        scanf("%s", nome);
        printf("Ola %s\n", nome);



        return 0;
}



3. Apresente os comportamentos do código anterior nos seguintes casos:
	(a) Se o usuário insere mais de um nome.
		$ ./ola_usuario_1 Eu Mesmo
		
		O código so pegará a string Eu, pois, o espaço caracteriza o fim da string. Utilizando a função scanf para o armazenamento da string, entretanto, se utilizarmos a função gets(nome_da_string) haverá o armazenamento mesmo com o espaço.

	(b) Se o usuário insere mais de um nome entre parênteses. Por exemplo:
		$ ./ola_usuario_1 "Eu Mesmo"
		Com o scanf haverá como saída apenas a string Eu.
	(c) Se é usado um pipe. Por exemplo:
		$ echo Eu | ./ola_usuario_1
		Com o scanf haverá como saída a função Eu.
	(d) Se é usado um pipe com mais de um nome. Por exemplo:
		$ echo Eu Mesmo | ./ola_usuario_1
		Com o scanf haverá como passagem de parâmetro apenas a string "Eu".
	(e) Se é usado um pipe com mais de um nome entre parênteses. Por exemplo:
		$ echo Eu Mesmo | ./ola_usuario_1
		Com o scanf saíra apenas a palavra Eu
	(f) Se é usado o redirecionamento de arquivo. Por exemplo:
		$ echo Ola mundo cruel! > ola.txt
		$ ./ola_usuario_1 < ola.txt
		
		A saída será Ola Ola porque o scanf não é capaz de pegar os espaços.

4. Crie um código em C que recebe o nome do usuário como um argumento de entrada (usando as variáveis argc e *argv[]), e imprime no terminal "Ola " e o nome do usuário. Por exemplo, considerando que o código criado recebeu o nome de 'ola_usuario_2':
	$ ./ola_usuario_2 Eu
	$ Ola Eu
	$

#include <stdio.h>
#include <stdlib.h>


int main(int argc, char **argv){
        char *nome;
        int tamanho;
        tamanho = sizeof(argv[1]);
        nome = (char*)(malloc(tamanho*sizeof(char)));
        nome = argv[1];
        printf("Ola %s\n", nome);
        return 0;
}


5. Apresente os comportamentos do código anterior nos seguintes casos:
	(a) Se o usuário insere mais de um nome.
		$ ./ola_usuario_2 Eu Mesmo
		
		O programa terá como saída somente o Eu, pois o Mesmo seria o argv[2], enquanto o Eu seria o argv[1].

	(b) Se o usuário insere mais de um nome entre parênteses. Por exemplo:
		$ ./ola_usuario_2 "Eu Mesmo"

		O programa terá como saída ola Eu Mesmo.

	(c) Se é usado um pipe. Por exemplo:
		$ echo Eu | ./ola_usuario_2

		A saída é igual a Ola (null) pq o echo passa os dados para uma leitura posterior e não para a leitura por linha de comando.

	(d) Se é usado um pipe com mais de um nome. Por exemplo:
		$ echo Eu Mesmo | ./ola_usuario_2

		A mesma saída da questão anterior.

	(e) Se é usado um pipe com mais de um nome entre parênteses. Por exemplo:
		$ echo Eu Mesmo | ./ola_usuario_2
		
		A mesma saída das respostas anteriores (null).

	(f) Se é usado o redirecionamento de arquivo. Por exemplo:
		$ echo Ola mundo cruel! > ola.txt
		$ ./ola_usuario_2 < ola.txt

		Ola (null). Mesma resposta da questão anterior.
		
6. Crie um código em C que faz o mesmo que o código da questão 4, e em seguida imprime no terminal quantos valores de entrada foram fornecidos pelo usuário. Por exemplo, considerando que o código criado recebeu o nome de 'ola_usuario_3':
	$ ./ola_usuario_3 Eu	
	$ Ola Eu
	$ Numero de entradas = 2
	$
#include <stdio.h>
#include <stdlib.h>

int main(int argc, char **argv){
        int qtde;
        char *nome;
        int tamanho = 0;
        int i;

        qtde = argc;
        for(i = 0; i < qtde; i++){
                tamanho += sizeof(argv[i]);
        }
        nome = (char*)(malloc(100*sizeof(char)));
        for(i = 0; i < argc; i++){
                nome = argv[i];
                printf("%s ", nome);
        }
        printf("\n");

        //printf("sizeof das entradas = %d\n", tamanho);
        printf("Numero de entrada = %d\n", qtde);




        return 0;
}


7. Crie um código em C que imprime todos os argumentos de entrada fornecidos pelo usuário. Por exemplo, considerando que o código criado recebeu o nome de 'ola_argumentos':
	$ ./ola_argumentos Eu Mesmo e Minha Pessoa
	$ Argumentos: Eu Mesmo e Minha Pessoa
	$
#include <stdio.h>
#include <stdlib.h>

int main(int argc, char **argv){
        int qtde;
        char *nome;
        int tamanho = 0;
        int i;

        qtde = argc;
        for(i = 0; i < qtde; i++){
                tamanho += sizeof(argv[i]);
        }
        nome = (char*)(malloc(100*sizeof(char)));
        for(i = 0; i < argc; i++){
                nome = argv[i];
                printf("%s ", nome);
        }
        printf("\n");

        //printf("sizeof das entradas = %d\n", tamanho);
        // printf("Numero de entrada = %d\n", qtde);




        return 0;
}



8. Crie uma função que retorna a quantidade de caracteres em uma string, usando o seguinte protótipo:

	int Num_Caracs(char *string);

Salve-a em um arquivo separado chamado 'num_caracs.c'. Salve o protótipo em um arquivo chamado 'num_caracs.h'. Compile 'num_caracs.c' para gerar o objeto 'num_caracs.o'.

//num_caracs.h
//num_caracs.h
#ifndef NUM_CARACS_H
#define NUM_CARACS_H
	int count_caracter(char *string);
#endif

//num_caracs.c
#include <stdio.h>
#include <string.h>
#include <stdlib.h>

int count_caracter(char *string){
	int i = 0;
	int tamanho;
	//implementation of strlen using the manual method	
	//tamanho = strlen(string);
	while(string[i] != '\0'){
		i++;
	}	
	tamanho = i;
	return tamanho;
}

//q8.c
#include <stdio.h>
#include <stdlib.h>
#include "num_caracs.h"

int main(){
	char *string;
	int tamanho;
	
	string = malloc(100*sizeof(char));
	scanf("%s", string);	
		
	tamanho = count_caracter(string);
	printf("%d\n", tamanho);

	return 0;	
	
}

//makefile
q8: q8.o num_caracs.o
	gcc $(CFLGAS) -o q8 q8.o num_caracs.o
num_caracs.o: num_caracs.c num_caracs.h
	gcc $(CFLAGS) -c num_caracs.c
q8.o: q8.c num_caracs.h
	gcc $(CFLAGS) -c q8.c

9. Re-utilize o objeto criado na questão 8 para criar um código que imprime cada argumento de entrada e a quantidade de caracteres de cada um desses argumentos. Por exemplo, considerando que o código criado recebeu o nome de 'ola_num_caracs_1':
	$ ./ola_num_caracs_1 Eu Mesmo
	$ Argumento: ./ola_num_caracs_1 / Numero de caracteres: 18
	$ Argumento: Eu / Numero de caracteres: 2
	$ Argumento: Mesmo / Numero de caracteres: 5
	$
//mylib.h
#ifndef MYLYB_H
#define MYLYB_H
	extern void mylib(char **argumento, int index);
#endif

//q9.c
#include <stdio.h>
#include <stdlib.h>
#include "mylib.h"

int main(int argc, char **argv){
	mylib(argv, argc);


	return 0;
}

//mylib.c
#include <stdio.h>
#include <stdlib.h>
#include <string.h>

void mylib(char **argumento, int index){
	int i, j;
	int tamanho;
	i = 0; j = 0;
	
	for(j = 0; j < index; j++){
		tamanho = strlen(argumento[j]);
		printf("Argumento: %s / Numero de caracteres: %d\n", argumento[j], tamanho);
	}		
}



10. Crie um Makefile para a questão anterior.

q8: q8.o num_caracs.o
	gcc $(CFLGAS) -o q8 q8.o num_caracs.o
num_caracs.o: num_caracs.c num_caracs.h
	gcc $(CFLAGS) -c num_caracs.c
q8.o: q8.c num_caracs.h
	gcc $(CFLAGS) -c q8.c

q9 : q9.o mylib.o
	gcc $(CFLAGS)  -o q9 q9.o mylib.o
mylib.o : mylib.c mylib.h
	gcc $(CLAGS) -c mylib.c
q9.o : q9.c mylib.c mylib.h
	gcc $(CFLAGS) -c q9.c 

11. Re-utilize o objeto criado na questão 8 para criar um código que imprime o total de caracteres nos argumentos de entrada. Por exemplo, considerando que o código criado recebeu o nome de 'ola_num_caracs_2':
	$ ./ola_num_caracs_2 Eu Mesmo
	$ Total de caracteres de entrada: 25
	$

12. Crie um Makefile para a questão anterior.
